package dataStructures;

public class Queue {


   
	private int[] A;	 
	private int front;
	private int rear;
	private int size;

	    public Queue() {
	        this.front = -1;
	        this.rear = -1;
	        this.size = 10;
	        this.A = new int[size];}
	    
			public boolean isEmpty() {
				if (front ==-1 && rear==-1) {
					return true;
				}  else {
					return false;
				}}
			
			
			  public boolean isFull() {
			        return rear == size - 1;
			    }
			  

			    public int front() {
			        if (isEmpty()) {
			           System.out.print("Queue is empty");
			        }
			        return A[front];
			    }
			    
				
			public void EnQueue(int number) {
				if(rear==size-1) {
					System.out.print("Queue is full");
					return;}
					else if(isEmpty()) {
						this.front=0;
						this.rear=0;
					}
					else {
						rear=rear+1;
					}
					A[rear]=number;
				}
			
		
		public void DeQueue() {
			if(isEmpty()) {
				return;
			}
			else if(front==rear) {
				this.front=-1;
				this.rear=-1;
			}
			else {
				front=front+1;
			}
		}
		
		public void print() {
	        if (isEmpty()) {
	            System.out.println("Queue is empty");
	            return;
	        }
	        System.out.print("Queue: ");
	        for (int i = front; i <= rear; i++) {
	            System.out.print(A[i] + " ");
	        }
	        System.out.println();
	    }
	
}

