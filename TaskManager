package taskManagmentFinalDS;
/*packages should be named using a small letter as the first letter by
convention but classes are named by using a capital letter as the first letter also by convention :)*/
import java.util.Scanner;

public class TaskManager {

    private Task[] taskArr;
    private int size;
    private int taskCapacity;
    private static final int DEFAULT_CAPACITY = 20;

    public TaskManager() {
        this.taskCapacity = DEFAULT_CAPACITY;
        this.size = 0;
        this.taskArr = new Task[taskCapacity];
    }

    public TaskManager(int initialCapacity) {
        while (initialCapacity <= 0) {
            System.out.println("Capacity must be positive. Please enter a valid capacity:");
            initialCapacity = new Scanner(System.in).nextInt();
        }
        this.taskCapacity = initialCapacity;
        this.size = 0;
        this.taskArr = new Task[taskCapacity];
    }

    public void addTask(Task task) {
        if (size == taskCapacity) {
            expandArray();
        }
        taskArr[size++] = task;
    }

    
    public Task findTask(String taskName) {
        for (int i = 0; i < size; i++) {
            if (taskArr[i].getTaskName().equalsIgnoreCase(taskName)) {
                return taskArr[i];
            }
        }
        return null; // Task with the given name not found
    }
    
    private void expandArray() {
        Task[] newArr = new Task[taskCapacity * 2];
        for (int i = 0; i < size; i++) {
            newArr[i] = taskArr[i];
        }
        taskArr = newArr;
        taskCapacity *= 2;
    }

    public void displayTasksByDueDate() {
        mergeSort(taskArr, 0, size - 1);
        for (int i = 0; i < size; i++) {
            System.out.println(taskArr[i]);
        }
    }

    private void mergeSort(Task[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    public void retrieveUrgentTasks() {
        for (int i = 0; i < size; i++) {
        if (taskArr[i].getTaskPriority() == Task.Priority.URGENT) {
                System.out.println(taskArr[i]);
            }
        }
    }

    public void sortTasksByCategory() {
        mergeSortByCategory(taskArr, 0, size - 1);
        for (int i = 0; i < size; i++) {
            System.out.println(taskArr[i]);
        }
    }

    private void merge(Task[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        Task[] leftArr = new Task[n1];
        Task[] rightArr = new Task[n2];

        for (int i = 0; i < n1; ++i) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; ++j) {
            rightArr[j] = arr[mid + 1 + j];
        }

        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (compareTasks(leftArr[i], rightArr[j]) <= 0) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    private int compareTasks(Task task1, Task task2) {
        if (task1.getYear() != task2.getYear()) {
            return Integer.compare(task1.getYear(), task2.getYear());
        } else if (task1.getMonth() != task2.getMonth()) {
            return Integer.compare(task1.getMonth(), task2.getMonth());
        } else {
            return Integer.compare(task1.getDay(), task2.getDay());
        }
    }

    private void mergeSortByCategory(Task[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSortByCategory(arr, left, mid);
            mergeSortByCategory(arr, mid + 1, right);
            mergeByCategory(arr, left, mid, right);
        }
    }

    private void mergeByCategory(Task[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        Task[] leftArr = new Task[n1];
        Task[] rightArr = new Task[n2];

        for (int i = 0; i < n1; ++i) {
            leftArr[i] = arr[left + i];
        }
        for (int j = 0; j < n2; ++j) {
            rightArr[j] = arr[mid + 1 + j];
        }

        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i].getTaskCategory().compareTo(rightArr[j].getTaskCategory()) <= 0) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

}

