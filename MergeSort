package dataStructures;
import java.util.Scanner;
public class MergeSort {
	public static void mergee(int[] L, int[] R, int[] A) {
	 int nL = L.length;
     int nR = R.length;
     int i = 0;
     int k = 0;
     int j = 0;
     while (i < nL && j < nR) {
         if (L[i] <= R[j]) {
             A[k] = L[i];
             i = i + 1;
         } else {
             A[k] = R[j];
             j = j + 1;
         }
         k = k + 1;
     }
     while (i < nL) {
         A[k] = L[i];
         i = i + 1;
         k = k + 1;
     }
     while (j < nR) {
         A[k] = R[j];
         j = j + 1;
         k = k + 1;
     }

    
 }
public static void main(String[] args) {
 Scanner meep = new Scanner(System.in);
 System.out.print("Enter the size of the array: ");
 int size = meep.nextInt();

 int[] arr = new int[size];

 System.out.println("Enter the elements of the array:");
 for (int i = 0; i < size; i++) {
     arr[i] = meep.nextInt();
 }

 mergeSort(arr);

 System.out.println("Sorted Array:");
 for (int num : arr) {
     System.out.print(num + " ");
 }
 meep.close();
}

public static void mergeSort(int[] A) {
 int n = A.length;
 if (n < 2) {
     return;
 }
 int mid = n / 2;
 int[] left = new int[mid];
 int[] right = new int[n - mid];

 // Dividing array into two halves
 for (int i = 0; i < mid; i++) {
     left[i] = A[i];
 }
 for (int i = mid; i < n; i++) {
     right[i - mid] = A[i];
 }

 // Recursively sorting left and right halves
 mergeSort(left);
 mergeSort(right);

 // Merging the sorted halves
 mergee(left, right, A);
}


}
