package partOneTaskThreePointFour;

public class SortedArray {
    private int[] array;
    private int size;

    public SortedArray(int capacity) {
        array = new int[capacity]; // O(1) >> creating an array of given capacity
        size = 0; // O(1) 
    }

    // Search method using binary search
    public int search(int target) {
        int left = 0; // O(1)  
        int right = size - 1; // O(1)

        while (left <= right) { // O(log n) >> binary search loop
            int mid = left + (right - left) / 2; // O(1) 
            if (array[mid] == target) {
                return mid; // O(1) 
            } else if (array[mid] < target) {
                left = mid + 1; // O(1) >> updating left bound
            } else {
                right = mid - 1; // O(1) >> updating right bound
            }
        }

        return -1; // O(1)
    }

    // Insert method
    public void insert(int value) {
        int i = size - 1; // O(1) 
        while (i >= 0 && array[i] > value) { // O(n) >> shifting elements to the right
            array[i + 1] = array[i]; // O(1) 
            i--; // O(1) 
        }
        array[i + 1] = value; // O(1) 
        size++; // O(1) 
    }

    // Remove method
    public void remove(int value) {
        int index = search(value); // O(log n) >> searching for the element
        if (index != -1) {
            for (int i = index; i < size - 1; i++) { // O(n) >> shifting elements to the left
                array[i] = array[i + 1]; // O(1) 
            }
            size--; // O(1)
        }
    }
}
