package partOneTaskThreePointFour;

public class LinkedList {
    private Node head; // O(1) 

    private class Node {
        int data; // O(1) 
        Node next; // O(1) 

        Node(int data) {
            this.data = data; // O(1) 
            this.next = null; // O(1) 
        }
    }

    // Search method
    public boolean search(int target) {
        Node current = head; // O(1) 
        while (current != null) { // O(n) >>traverse the list
            if (current.data == target) { // O(1) 
                return true; // O(1) 
            }
            current = current.next; // O(1) 
        }
        return false; // O(1) 
    }

    // Insert method at the end
    public void insert(int value) {
        Node newNode = new Node(value); // O(1)
        if (head == null) { // O(1) >> check if the list is empty
            head = newNode; // O(1) >> set the new node as head
        } else {
            Node current = head; // O(1) 
            while (current.next != null) { // O(n) >> traverse to the end of the list
                current = current.next; // O(1) 
            }
            current.next = newNode; // O(1) 
        }
    }

    // Remove method
    public void remove(int value) {
        if (head == null) { // O(1) >> check if the list is empty
            return; // O(1) 
        }
        if (head.data == value) { // O(1) 
            head = head.next; // O(1) 
            return; // O(1)
        }
        Node prev = head; // O(1)
        Node current = head.next; // O(1) 
        while (current != null) { // O(n) >> traverse the list
            if (current.data == value) { // O(1)
                prev.next = current.next; // O(1) 
                return; // O(1)
            }
            prev = current; // O(1) 
            current = current.next; // O(1) 
        }
    }
}

