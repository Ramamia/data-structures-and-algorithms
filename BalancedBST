package partOneTaskThreePointFour;

public class BalancedBST {
    private Node root;

    // Inner Node class to represent the elements of the tree
    private class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    // Search method (O(log n) in balanced tree)
    public boolean search(int target) {
        return search(root, target); // O(log n) >> calls the private search method
    }

    // Private search method
    private boolean search(Node node, int target) {
        if (node == null) {
            return false; // O(1) >> base case
        }
        if (node.data == target) {
            return true; // O(1) >> base case
        }
        if (target < node.data) {
            return search(node.left, target); // O(log n) >> traverses left subtree in balanced tree
        } else {
            return search(node.right, target); // O(log n) >> traverses right subtree in balanced tree
        }
    }

    // Insert method (O(log n) in balanced tree)
    public void insert(int value) {
        root = insert(root, value); // O(log n) >> calls the private insert method
    }

    // Private insert method
    private Node insert(Node node, int value) {
        if (node == null) {
            return new Node(value); // O(1) >> base case, create new node
        }
        if (value < node.data) {
            node.left = insert(node.left, value); // O(log n) >> inserts into left subtree(recursive)
        } else {
            node.right = insert(node.right, value); // O(log n) >> inserts into right subtree(recursive)
        }
        return node;
    }

    // Remove method (O(log n) in balanced tree)
    public void remove(int value) {
        root = remove(root, value); // O(log n) >> calls the private remove method
    }

    // Private remove method
    private Node remove(Node node, int value) {
        if (node == null) {
            return null; // O(1) >> base case
        }
        if (value < node.data) {
            node.left = remove(node.left, value); // O(log n) >> removes from left subtree(recursive)
        } else if (value > node.data) {
            node.right = remove(node.right, value); // O(log n) >> removes from right subtree(recursive)
        } else {

        	if (node.left == null) {
                return node.right; // O(1) 
            } else if (node.right == null) {
                return node.left; // O(1) 
            }

        	node.data = minValue(node.right); // O(log n) >> finds the inorder successor in balanced tree

        	node.right = remove(node.right, node.data); // O(log n) >> removes the inorder successor (recursive)
        }
        return node;
    }

    // Helper method to find the minimum value in a subtree
    private int minValue(Node node) {
        int min = node.data;
        while (node.left != null) {
            min = node.left.data;
            node = node.left; // O(log n) >> traverses the left subtree to find the minimum value in balanced tree
        }
        return min;
    }
}
